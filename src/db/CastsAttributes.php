<?php

namespace markhuot\craftai\db;

use markhuot\craftai\casts\MapFromInput;
use markhuot\craftai\casts\CastInterface;

trait CastsAttributes
{
    /** @var array<string, class-string<CastInterface>> */
    protected array $casts = [];

    public function __get($key)
    {
        if ($caster = ($this->casts[$key] ?? false)) {
            // @phpstan-ignore-next-line
            return (new $caster)->get($this, $key, $this->getAttribute($key));
        }

        return parent::__get($key);
    }

    public function getCast($key)
    {
        return $this->casts[$key] ?? null;
    }

    /**
     * @param  array<array-key, mixed>  $values
     */
    public function setAttributes($values, $safeOnly = true): void
    {
        foreach ($values as $key => $value) {
            if ($caster = ($this->casts[$key] ?? false)) {
                $values[$key] = (new $caster)->set($this, $key, $value);
            }
        }

        parent::setAttributes($values, $safeOnly);
    }

    public static function populateRecord($record, $row)
    {
        $reflect = new \ReflectionClass($record);
        $properties = $reflect->getProperties();

        foreach ($row as $key => $value) {
            foreach ($properties as $property) {
                $attributes = $property->getAttributes(MapFromInput::class);
                foreach ($attributes as $attribute) {
                    if ($key === $attribute->newInstance()->inputKey) {
                        $key = $property->getName();
                        break 2;
                    }
                }
            }

            if ($caster = $record->getCast($key)) {
                $row[$key] = (new $caster)->set($record, $key, $value);
            }
        }

        parent::populateRecord($record, $row); // TODO: Change the autogenerated stub
    }
}
