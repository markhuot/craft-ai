{% extends "_layouts/cp.twig" %}
{% import '_includes/forms.twig' as forms %}

{% do view.registerAssetBundle("markhuot\\craftai\\assetbundles\\CraftAi") %}
{% set title = "Edit Image"|t('ai') %}
{% set selectedSubnavItem = 'image.edit' %}

{% block content %}
    <form action="" method="post" data-edit-form>
        {{ csrfInput() }}
        {{ actionInput('ai/image/store-edit') }}
        {{ redirectInput('ai/images/edit') }}
        <input type="hidden" name="asset" value="{{ asset.id }}">

        <div class="flex gap-m">
            <div class="flex-grow">
                {{ forms.textField({
                    first: true,
                    label: 'Prompt',
                    name: 'prompt',
                    placeholder: 'add a novelty party hat',
                    value: old('prompt', prompt),
                    errors: [flash('error.prompt')]|filter,
                }) }}
            </div>
        </div>
        <div class="ai-mt-l">
            {% include 'ai/_images/_submit' %}
        </div>
    </form>
    <style>
        canvas {
            background-image:
                    linear-gradient(45deg, #ccc 25%, transparent 25%),
                    linear-gradient(45deg, transparent 75%, #ccc 75%),
                    linear-gradient(45deg, transparent 75%, #ccc 75%),
                    linear-gradient(45deg, #ccc 25%, #fff 25%);
            background-size:20px 20px;
            background-position:0 0, 0 0, -10px -10px, 10px 10px;
        }
    </style>
    <canvas class="ai-mt-l" data-edit-canvas id="canvas" width="{{ asset.width }}" height="{{ asset.height }}"></canvas>
{% endblock %}

{% js %}
    const input = document.createElement('input');
    input.type = 'hidden';
    input.value = '';
    input.name = 'mask';
    document.querySelector('[data-edit-form]').appendChild(input);

//     document.addEventListener('submit', function (event) {
//         if (event.target?.dataset?.editForm === undefined) {
//             return;
//         }
//
//         const canvas = document.querySelector('[data-edit-canvas]');
//         const pngData = canvas.toDataURL('image/png');
//         const input = document.createElement('input');
//         input.type = 'hidden';
//         input.value = pngData;
//         input.name = 'mask';
//         event.target.appendChild(input);
//     });

    // Code from https://github.com/herbertyoung/Eraser.js
    (function(exports){
        var document = exports.document,
            hastouch = 'ontouchstart' in exports ? true : false,
            tapstart = hastouch ? 'touchstart' : 'mousedown',
            tapmove = hastouch ? 'touchmove' : 'mousemove',
            tapend = hastouch ? 'touchend' : 'mouseup',
            x1, y1, x2, y2;

        function Eraser(canvas, imgUrl){
            this.canvas = canvas;
            this.ctx = canvas.getContext('2d');
            this.imgUrl = imgUrl;
            this.timer = null;
            this.lineWidth = 100;
            this.gap = 10;
        };
        exports.Eraser = Eraser;

        Eraser.prototype = {
            init: function(args){
                for(var p in args){
                    this[p] = args[p];
                }
                var _this = this,
                    img = new Image();

                this.canvasWidth = this.canvas.width; // = Math.min(document.body.offsetWidth, 1000);
                // this.canvasHeight = this.canvas.height;
                img.src = this.imgUrl;
                img.onload = function(){
                    _this.canvasHeight = _this.canvasWidth * this.height / this.width;
                    _this.canvas.height = _this.canvasHeight;
                    _this.ctx.drawImage(this, 0, 0, _this.canvasWidth, _this.canvasHeight);
                    _this.initEvent();
                };
            },
            initEvent: function(){
                this.ctx.lineCap = 'round';
                this.ctx.lineJoin = 'round';
                this.ctx.lineWidth = this.lineWidth;
                this.ctx.globalCompositeOperation = 'destination-out';

                this.tapMoveHandler = this.onTapMove.bind(this);
                this.tapStartHandler = this.onTapStart.bind(this);
                this.tapEndHandler = this.onTapEnd.bind(this);
                this.canvas.addEventListener(tapstart, this.tapStartHandler, false);
                this.canvas.addEventListener(tapend, this.tapEndHandler, false);
            },
            onTapStart: function(ev){
                ev.preventDefault();
                x1 = hastouch ? ev.targetTouches[0].pageX - this.canvas.offsetLeft : (ev.layerX / this.canvas.offsetWidth) * this.canvasWidth;
                y1 = hastouch ? ev.targetTouches[0].pageY - this.canvas.offsetTop : (ev.layerY / this.canvas.offsetHeight) * this.canvasHeight;

                // this.ctx.save();
                this.ctx.beginPath();
                this.ctx.arc(x1, y1, 1, 0, 2 * Math.PI);
                this.ctx.fill();
                this.ctx.stroke();
                // this.ctx.restore();

                this.canvas.addEventListener(tapmove, this.tapMoveHandler, false);
            },
            onTapMove: function(ev){
                ev.preventDefault();
                var _this = this;
                if(!this.timer){
                    this.timer = setTimeout(function(){
                        x2 = hastouch ? ev.targetTouches[0].pageX - _this.canvas.offsetLeft : (ev.layerX / _this.canvas.offsetWidth) * _this.canvasWidth;
                        y2 = hastouch ? ev.targetTouches[0].pageY - _this.canvas.offsetTop : (ev.layerY / _this.canvas.offsetHeight) * _this.canvasHeight;

                        // _this.ctx.save();
                        _this.ctx.moveTo(x1, y1);
                        _this.ctx.lineTo(x2, y2);
                        _this.ctx.stroke();
                        // _this.ctx.restore();

                        x1 = x2;
                        y1 = y2;
                        _this.timer = null;
                    }, 40);
                }
            },
            onTapEnd: function(ev){
                ev.preventDefault();
                var _this = this,
                    i = 0,
                    count = 0,
                    imgData = this.ctx.getImageData(0, 0, this.canvasWidth, this.canvasHeight);

                for(var x=0; x<imgData.width; x+=this.gap){
                    for(var y=0; y<imgData.height; y+=this.gap){
                        i = (y * imgData.width + x) * 4;
                        if(imgData.data[i + 3] > 0){
                            count++;
                        }
                    }
                }
                if(count / (imgData.width * imgData.height / (this.gap * this.gap)) < 0.6){
                    setTimeout(function(){
                        _this.removeEvent();
                        document.body.removeChild(_this.canvas);
                        _this.canvas = null;
                    }, 40);
                }else{
                    this.canvas.removeEventListener(tapmove, this.tapMoveHandler, false);
                }

                document.querySelector('[data-edit-form]').querySelector('[name="mask"]').value =
                    document.querySelector('[data-edit-canvas]').toDataURL('image/png');
            },
            removeEvent: function(){
                this.canvas.removeEventListener(tapstart, this.tapStartHandler, false);
                this.canvas.removeEventListener(tapend, this.tapEndHandler, false);
                this.canvas.removeEventListener(tapmove, this.tapMoveHandler, false);
            }
        };

        window.addEventListener('load', function(){
            var canvas = document.querySelector('#canvas'),
                eraser = new Eraser(canvas, '{{ asset.url }}');
            eraser.init();
        }, false);
    })(window);
{% endjs %}

